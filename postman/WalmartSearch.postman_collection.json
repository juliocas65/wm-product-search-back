{
	"info": {
		"name": "Walmart-Search",
		"_postman_id": "96105325-40c2-0373-3341-738b9738dcda",
		"description": "",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "/products/health",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"the code property should match 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"the response should match ok\", function () {",
							"    pm.response.to.be.ok;",
							"});",
							"",
							"pm.test(\"the message have to be product is up and running \", function () {",
							"    pm.response.to.have.body(\"product is up and running\")",
							"});"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "localhost:3100/products/health",
					"host": [
						"localhost"
					],
					"port": "3100",
					"path": [
						"products",
						"health"
					]
				}
			},
			"response": []
		},
		{
			"name": "/products/search - Ok Product By ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"the code property should match 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"the response should match ok\", function () {",
							"    pm.response.to.be.ok;",
							"});",
							"pm.test(\"the body code have to SUCCESS\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.code).to.eql(\"SUCCESS\");",
							"});",
							"pm.test(\"the body message have to SUCCESS\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.eql(\"Products found\");",
							"});",
							"pm.test(\"the body data must have 1 object\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.data).to.have.lengthOf(1);",
							"});",
							"pm.test(\"the body data id must match with search\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.data[0]).to.have.property('id');",
							"    pm.expect(jsonData.data[0].id).to.eql(181)",
							"});"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-country",
						"value": "CL"
					},
					{
						"key": "x-channel",
						"value": "Web"
					},
					{
						"key": "x-commerce",
						"value": "Market"
					}
				],
				"body": {},
				"url": {
					"raw": "localhost:3100/products/search/?search=181",
					"host": [
						"localhost"
					],
					"port": "3100",
					"path": [
						"products",
						"search",
						""
					],
					"query": [
						{
							"key": "search",
							"value": "181",
							"equals": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/products/search - Ok Product by Description",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"the code property should match 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"the response should match ok\", function () {",
							"    pm.response.to.be.ok;",
							"});",
							"pm.test(\"the body code have to SUCCESS\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.code).to.eql(\"SUCCESS\");",
							"});",
							"pm.test(\"the body message have to SUCCESS\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.eql(\"Products found\");",
							"});",
							"pm.test(\"the body data must have 1 object\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.data).to.have.lengthOf(2);",
							"});",
							"pm.test(\"the body data id must match with search\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.data[0]).to.have.property('description');",
							"    pm.expect(jsonData.data[1]).to.have.property('description');",
							"});"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-country",
						"value": "CL"
					},
					{
						"key": "x-channel",
						"value": "Web"
					},
					{
						"key": "x-commerce",
						"value": "Market"
					}
				],
				"body": {},
				"url": {
					"raw": "localhost:3100/products/search/?search=ele",
					"host": [
						"localhost"
					],
					"port": "3100",
					"path": [
						"products",
						"search",
						""
					],
					"query": [
						{
							"key": "search",
							"value": "ele",
							"equals": true
						}
					]
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "/products/search - Error Product",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"the code property should match 500\", function () {",
							"    pm.response.to.have.status(500);",
							"});",
							"pm.test(\"the response should match error\", function () {",
							"    pm.response.to.be.error;",
							"});",
							"pm.test(\"the body code have to ERROR\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.code).to.eql(\"ERROR\");",
							"});",
							"pm.test(\"the body message have to Error during search\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.eql(\"Error during search\");",
							"});",
							"pm.test(\"the body error must have error property\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property(\"error\");",
							"});",
							""
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-country",
						"value": "CL"
					},
					{
						"key": "x-channel",
						"value": "Web"
					},
					{
						"key": "x-commerce",
						"value": "Market"
					}
				],
				"body": {},
				"url": {
					"raw": "localhost:3100/products/search/?search=tgh",
					"host": [
						"localhost"
					],
					"port": "3100",
					"path": [
						"products",
						"search",
						""
					],
					"query": [
						{
							"key": "search",
							"value": "tgh",
							"equals": true
						}
					]
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "/products/search - Ok Product Not Found",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"the code property should match 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"the response should match ok\", function () {",
							"    pm.response.to.be.ok;",
							"});",
							"pm.test(\"the body code have to NOT_FOUND\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.code).to.eql(\"NOT_FOUND\");",
							"});",
							"pm.test(\"the body message have to Products not found\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.eql(\"Products not found\");",
							"});",
							"pm.test(\"the body not have data\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.not.have.property(\"data\");",
							"});",
							""
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-country",
						"value": "CL"
					},
					{
						"key": "x-channel",
						"value": "Web"
					},
					{
						"key": "x-commerce",
						"value": "Market"
					}
				],
				"body": {},
				"url": {
					"raw": "localhost:3100/products/search/?search=yhi",
					"host": [
						"localhost"
					],
					"port": "3100",
					"path": [
						"products",
						"search",
						""
					],
					"query": [
						{
							"key": "search",
							"value": "yhi",
							"equals": true
						}
					]
				},
				"description": ""
			},
			"response": []
		}
	]
}